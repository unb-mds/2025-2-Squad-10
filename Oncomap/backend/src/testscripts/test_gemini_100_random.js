// backend/src/testscripts/test_gemini.js
const fs = require('fs');
const path = require('path');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const db = require('../config/database');
const axios = require('axios');
const pdfParse = require('pdf-parse');
require('dotenv').config();

// --- Caminho do Arquivo de Sa√≠da ---
const outputFilePath = path.resolve(__dirname, 'sample_llm_output.json');

// --- Configura√ß√µes ---
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
// Corrigido: Usando gemini-1.5-pro (que sabemos que funciona e tem janela grande)
const model = genAI.getGenerativeModel({ model: "gemini-flash-latest" });

// --- Constantes ---
const MAX_RETRIES = 3;
// Mantendo o delay longo para o modelo Pro free tier (~2 RPM)
const DELAY_BETWEEN_REQUESTS = 4000; // 4 segundos (mais seguro)

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// --- Prompt (cole seu prompt completo aqui) ---
function getGeminiPrompt(textContent) {
  // Certifique-se de que seu prompt completo esteja aqui
  return `
      **Tarefa:** VOC√ä √â UM ANALISTA FINANCEIRO ESPECIALIZADO EM OR√áAMENTO P√öBLICO DE SA√öDE ONCOL√ìGICA. Analise CUIDADOSAMENTE o seguinte texto extra√≠do de um Di√°rio Oficial Municipal brasileiro. Seu objetivo √©:
      1. Identificar, extrair e somar TODOS os valores monet√°rios (em Reais) que representem gastos ou investimentos DIRETAMENTE relacionados √† √°rea de ONCOLOGIA.
      2. Categorizar esses valores somados conforme as regras abaixo.
      3. Extrair informa√ß√µes contextuais RELEVANTES sobre esses gastos oncol√≥gicos, se claramente presentes.

      **Formatos de Valor a Procurar (Exemplos):** R$ 1.234,56, Valor: 1.234,56, custo total de 1.234,56, etc.

      **Formato OBRIGAT√ìRIO da Resposta:**
      Sua resposta deve ser **EXCLUSIVAMENTE um objeto JSON v√°lido**, sem nenhum texto antes ou depois, e sem usar markdown (como \`\`\`json). A estrutura base √© MANDAT√ìRIA, mas campos adicionais podem ser inclu√≠dos se relevantes.

      {
        "total_gasto_oncologico": 0.00,  // MANDAT√ìRIO (Soma calculada por voc√™)
        "medicamentos": 0.00,         // MANDAT√ìRIO
        "equipamentos": 0.00,         // MANDAT√ìRIO
        "estadia_paciente": 0.00,       // MANDAT√ìRIO
        "obras_infraestrutura": 0.00,  // MANDAT√ìRIO
        "servicos_saude": 0.00,         // MANDAT√ìRIO
        "outros_relacionados": 0.00,    // MANDAT√ìRIO
        "detalhes_extraidos": [
           {
              "valor_individual": 1234.56,
              "categoria_estimada": "Medicamentos",
              "empresa_contratada": "Nome da Empresa LTDA",
              "objeto_contrato": "Descri√ß√£o breve do servi√ßo/produto oncol√≥gico",
              "numero_processo": "123/2025"
           }
        ]
      }

      **Regras Detalhadas:**
      1.  **Foco Estrito em Oncologia:** Considere APENAS valores ligados a oncologia, c√¢ncer, quimioterapia, radioterapia, etc.
      2.  **Extra√ß√£o e Convers√£o Num√©rica:** Encontre TODOS os valores. Converta para float (ponto decimal).
      3.  **Categoriza√ß√£o:** Siga as defini√ß√µes:
          * "medicamentos": Compra/fornecimento de quimioter√°picos, imunoter√°picos.
          * "equipamentos": Aquisi√ß√£o, aluguel, manuten√ß√£o de equipamentos oncol√≥gicos.
          * "estadia_paciente": Custo de interna√ß√£o, di√°ria de leito oncol√≥gico.
          * "obras_infraestrutura": Constru√ß√£o, reforma de instala√ß√µes oncol√≥gicas.
          * "servicos_saude": Contrata√ß√£o de servi√ßos/exames oncol√≥gicos (radioterapia, quimioterapia).
          * "outros_relacionados": Gastos oncol√≥gicos que n√£o se encaixam acima.
      4.  **Soma Total:** Deve ser a soma exata das outras categorias. VERIFIQUE A SOMA.
      5.  **Detalhes Extra√≠dos:** Adicione um objeto ao array para CADA valor encontrado. Se nenhum valor for encontrado, retorne um array vazio [].
      6.  **Nenhum Valor Encontrado:** JSON com valores num√©ricos zerados e array "detalhes_extraidos" vazio [].
      7.  **JSON Puro:** Apenas o JSON.

      **Texto para An√°lise:**
      """
      ${textContent}
      """
  `;
}

// --- Fun√ß√£o extractJsonFromString (cole sua fun√ß√£o aqui) ---
function extractJsonFromString(text) {
    if (!text) return null;
    // Tenta encontrar o JSON de forma mais robusta, incluindo limpeza de markdown
    const match = text.match(/\{[\s\S]*\}/);
    let potentialJson = null;
    if (match) {
        potentialJson = match[0].trim();
    } else {
        // Se n√£o encontrar '{...}', tenta limpar markdown como √∫ltimo recurso
        potentialJson = text.replace(/^```json\s*/, '').replace(/```$/, '').trim();
    }

    // Tenta parsear o JSON potencial encontrado
    if (potentialJson && potentialJson.startsWith('{') && potentialJson.endsWith('}')) {
       try {
           JSON.parse(potentialJson);
           return potentialJson; // Retorna somente se for JSON v√°lido
       } catch (e) {
           console.warn("   -> Aviso: Texto extra√≠do parecia JSON, mas falhou no parse:", e.message);
       }
    }
    return null; // N√£o encontrou JSON v√°lido
}


/**
 * Processa o texto COMPLETO de um PDF com a API do Gemini.
 */
async function processPdfWithGemini(textContent, mentionId) {
    let attempt = 0;
    while (attempt < MAX_RETRIES) {
      try {
        console.log(`    -> Enviando texto completo para Gemini (Tentativa ${attempt + 1})...`);
        const prompt = getGeminiPrompt(textContent);

        // Adicionando configura√ß√£o para garantir sa√≠da JSON
        const generationConfig = {
             responseMimeType: "application/json",
        };

        const result = await model.generateContent({
            contents: [{ role: "user", parts: [{ text: prompt }] }],
            generationConfig
        });

        let rawResponseText = '';
        // Tenta extrair o texto da resposta (pode variar um pouco na estrutura)
        try {
            rawResponseText = result.response.text();
        } catch (e) {
             if (result.response && result.response.candidates && result.response.candidates[0].content.parts[0].text) {
                rawResponseText = result.response.candidates[0].content.parts[0].text;
             } else {
                 console.error("   -> Estrutura de resposta inesperada da API Gemini:", JSON.stringify(result.response, null, 2));
                 throw new Error("Formato de resposta inesperado da API.");
             }
        }
        console.log(`    -> Resposta bruta recebida.`);

        const jsonString = extractJsonFromString(rawResponseText);

        if (jsonString) {
          try {
            const analysis = JSON.parse(jsonString);
            // Valida√ß√£o m√≠nima da estrutura esperada
            if (typeof analysis.total_gasto_oncologico === 'number' && Array.isArray(analysis.detalhes_extraidos)) {
                 console.log(`    -> JSON v√°lido extra√≠do e validado.`);
                 return analysis; // Retorna o objeto JSON completo
            } else {
                 console.warn(`    -> Aviso: JSON extra√≠do n√£o possui a estrutura esperada (total_gasto_oncologico ou detalhes_extraidos ausente/inv√°lido).`);
                 return null;
            }
          } catch (parseError) {
            console.error(`    -> ‚ùå Erro ao analisar JSON (ID ${mentionId}): ${parseError.message}. Resposta bruta: ${rawResponseText}`);
            return null;
          }
        } else {
          console.error(`    -> ‚ùå N√£o foi poss√≠vel extrair JSON da resposta (ID ${mentionId}). Resposta bruta: ${rawResponseText}`);
          return null;
        }

      } catch (error) {
        let isRateLimitError = false;
        // Verifica diferentes formas de erro de Rate Limit
        if (error.status === 429 || (error.message && error.message.includes('429'))) {
            isRateLimitError = true;
        } else if (error.message && (error.message.toLowerCase().includes('resource_exhausted') || error.message.toLowerCase().includes('rate limit'))) {
             isRateLimitError = true;
        }

        if (isRateLimitError) {
          attempt++;
          // Aumenta o tempo de espera a cada tentativa
          const waitTimeSeconds = Math.pow(2, attempt) * 5 + Math.random() * 2; // Adiciona jitter
          console.warn(`    -> üö¶ Rate limit (Tentativa ${attempt}/${MAX_RETRIES}). Esperando ${waitTimeSeconds.toFixed(1)}s...`);
          await delay(waitTimeSeconds * 1000);
          // N√£o retorna null aqui, o loop while vai tentar novamente
        } else {
          // Erro fatal (n√£o √© rate limit)
          console.error(`    -> ‚ùå ERRO FATAL no processamento LLM (ID ${mentionId}):`, error.message);
          if (error.response && error.response.data) {
              console.error('       Detalhes API:', JSON.stringify(error.response.data, null, 2));
          } else if (error.cause) { // Para erros da biblioteca GoogleGenerativeAI
               console.error('       Causa do erro:', error.cause);
          }
          return null; // Falha irrecuper√°vel para esta men√ß√£o
        }
      }
    } // Fim do while
    console.error(`    -> ‚ùå Excedido n√∫mero m√°ximo de retries (${MAX_RETRIES}) para Rate Limit (ID ${mentionId}).`);
    return null; // Falha ap√≥s retries
}


/**
 * Fun√ß√£o Principal de Teste - COMPLETA E CORRIGIDA
 */
async function testGeminiWithPdf() {
  console.log('‚úÖ Iniciando teste com Gemini (1.5 Pro) - Processando IDs espec√≠ficos...');

  // --- Query SQL para IDs espec√≠ficos ---
  const mentionsToTest = await db.query(
    `SELECT id, municipality_name, source_url
     FROM mentions
     WHERE id IN (6827, 6936, 6930, 6706, 7349)` // IDs espec√≠ficos
  );

  if (mentionsToTest.rows.length === 0) {
    console.log('Nenhuma das men√ß√µes especificadas foi encontrada para testar.');
    return;
  }

  console.log(`‚ÑπÔ∏è  Encontradas ${mentionsToTest.rows.length} men√ß√µes. Processando PDFs e salvando em ${path.basename(outputFilePath)}`);

  // --- Limpa/Cria o arquivo de sa√≠da ---
  try {
      fs.writeFileSync(outputFilePath, '', 'utf8');
      console.log(`   -> Arquivo de sa√≠da ${path.basename(outputFilePath)} limpo/criado.`);
  } catch (initError) {
      console.error(`‚ùå ERRO CR√çTICO ao inicializar arquivo de sa√≠da: ${initError.message}. Abortando.`);
      return;
  }
  // --- FIM DA LIMPEZA ---

  const allResults = []; // Para o resumo final no console
  let successCount = 0;
  let failureCount = 0;

  for (const [index, mention] of mentionsToTest.rows.entries()) {

    console.log(`\n--- [${index + 1}/${mentionsToTest.rows.length}] Processando Men√ß√£o ID: ${mention.id} (${mention.municipality_name}) ---`);
    let pdfText = '';
    let finalJsonResult = {};
    let analysisResult = null; // Guarda o resultado da LLM

    // --- Verifica√ß√£o Robusta da URL ---
    const urlParaBaixar = mention.source_url ? mention.source_url.trim() : null;
    console.log(`   Verificando URL: "${urlParaBaixar}" (Tipo: ${typeof urlParaBaixar})`);

    if (!urlParaBaixar || urlParaBaixar === '') {
        console.warn(`  -> Aviso: source_url est√° NULO ou VAZIO para Men√ß√£o ID ${mention.id}. Pulando.`);
        finalJsonResult = { mention_id: mention.id, municipality_name: mention.municipality_name, error: "Source URL nula ou vazia." };
        // failureCount ser√° incrementado no bloco de salvar
    } else {
        // --- FIM DA VERIFICA√á√ÉO ---

        // 1. Baixar e Parsear o PDF
        try {
          console.log(`  -> Baixando PDF de: ${urlParaBaixar}`);
          const response = await axios.get(urlParaBaixar, { responseType: 'arraybuffer' });
          const pdfBuffer = response.data;
          console.log(`  -> PDF baixado. Extraindo texto...`);
          const data = await pdfParse(pdfBuffer);
          pdfText = data.text;
          console.log(`  -> Texto extra√≠do (${pdfText.length} caracteres).`);
        } catch (error) {
          console.error(`‚ùå Erro ao baixar ou parsear PDF para men√ß√£o ID ${mention.id}:`, error.message);
          finalJsonResult = { mention_id: mention.id, municipality_name: mention.municipality_name, error: `Erro download/parse PDF: ${error.message}` };
          pdfText = null; // Garante que n√£o prossiga
        }

        // Pula an√°lise LLM se o texto for vazio ou se houve erro no passo anterior
        if (!pdfText || pdfText.trim() === '') {
            if (!finalJsonResult.error) { // S√≥ loga/marca se n√£o houve erro de download/parse
                console.warn(`  -> Aviso: Texto extra√≠do do PDF est√° vazio para Men√ß√£o ID ${mention.id}. Pulando an√°lise LLM.`);
                finalJsonResult = { mention_id: mention.id, municipality_name: mention.municipality_name, error: "Texto extra√≠do do PDF estava vazio." };
            }
        } else {
            // 2. Processamento com LLM (S√≥ executa se pdfText for v√°lido)
            analysisResult = await processPdfWithGemini(pdfText, mention.id);

            // 3. Monta o JSON Final
            if (analysisResult && typeof analysisResult === 'object' && analysisResult !== null && typeof analysisResult.total_gasto_oncologico === 'number') {
              finalJsonResult = {
                mention_id: mention.id,
                municipality_name: mention.municipality_name,
                ...analysisResult,
                _meta: { source: "pdf", approx_total_chars: pdfText.length }
              };
              // successCount ser√° incrementado no bloco de salvar
            } else {
              finalJsonResult = {
                mention_id: mention.id,
                municipality_name: mention.municipality_name,
                error: "Falha no processamento da LLM ou resultado inv√°lido/malformado.",
                raw_llm_response: analysisResult, // Inclui a resposta bruta se poss√≠vel
                _meta: { source: "pdf", approx_total_chars: pdfText.length }
              };
              // failureCount ser√° incrementado no bloco de salvar
            }
        }
    } // Fim do 'else' da verifica√ß√£o da URL

    // --- Salva no Arquivo (SEMPRE tenta salvar) ---
    try {
        const jsonLine = JSON.stringify(finalJsonResult);
        fs.appendFileSync(outputFilePath, jsonLine + '\n', 'utf8');
        allResults.push(finalJsonResult); // Guarda na mem√≥ria para o resumo

        // Loga e conta sucesso/falha AP√ìS salvar com sucesso
        if (!finalJsonResult.error && typeof finalJsonResult.total_gasto_oncologico === 'number') {
             console.log(`  -> SUCESSO! Total: R$ ${finalJsonResult.total_gasto_oncologico.toFixed(2)}. Salvo em ${path.basename(outputFilePath)}`);
             successCount++; // Conta sucesso AQUI
        } else {
             // Garante que tenha uma mensagem de erro se n√£o for sucesso
             if (!finalJsonResult.error) {
                 finalJsonResult.error = "Resultado da LLM n√£o continha 'total_gasto_oncologico' num√©rico ap√≥s salvamento.";
             }
             console.error(`  -> FALHA no processamento da men√ß√£o ID ${mention.id}. Erro: ${finalJsonResult.error}. Salvo em ${path.basename(outputFilePath)}.`);
             failureCount++; // Conta falha AQUI
        }
    } catch (writeError) {
        console.error(`‚ùå ERRO CR√çTICO AO TENTAR SALVAR resultado para men√ß√£o ID ${mention.id} no arquivo:`, writeError.message);
        // Se falhou ao salvar, garante que seja contado como falha e registra o erro
        if (!finalJsonResult.error) failureCount++;
        finalJsonResult.error = `Erro cr√≠tico ao salvar no arquivo: ${writeError.message}`;
        allResults.push(finalJsonResult);
    }
    // --- FIM DO SALVAMENTO ---

    await delay(DELAY_BETWEEN_REQUESTS); // Pausa entre men√ß√µes
  } // Fim do loop FOR

  console.log('\nüéâ Teste finalizado!');
  console.log('--- Resumo dos Resultados (tamb√©m salvos no arquivo) ---');
  console.log(`   - Total de men√ß√µes processadas (ou tentadas): ${allResults.length}`);
  // Usamos os contadores que foram incrementados corretamente
  console.log(`   - Sucessos: ${successCount}`);
  console.log(`   - Falhas: ${failureCount}`);
  console.log(`   - Resultados completos salvos em: ${outputFilePath}`);
}

testGeminiWithPdf().catch(console.error); // Chama a fun√ß√£o principal