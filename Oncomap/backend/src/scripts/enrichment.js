// backend/src/scripts/enrichment.js

const { GoogleGenerativeAI } = require('@google/generative-ai');
const db = require('../config/database'); // Ajuste o caminho
const axios = require('axios'); // Precisamos do axios para baixar o .txt
require('dotenv').config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-flash-latest' });
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// O prompt para o Gemini permanece o mesmo
function getGeminiPrompt(textContent) { 
    return `
        **Tarefa:** Analise o seguinte texto extra√≠do de um Di√°rio Oficial Municipal brasileiro. Seu objetivo √© identificar e extrair TODOS os valores monet√°rios (em Reais) que representem gastos ou investimentos DIRETAMENTE relacionados √† √°rea de ONCOLOGIA. Ap√≥s identificar os valores, some-os e categorize-os de acordo com as regras abaixo.

        **Formato OBRIGAT√ìRIO da Resposta:**
        Sua resposta deve ser **EXCLUSIVAMENTE um objeto JSON v√°lido**, sem nenhum texto antes ou depois, e sem usar markdown (como \`\`\`json). O formato deve ser EXATAMENTE este:

        {
          "total_gasto_oncologico": 0.00,
          "medicamentos": 0.00,
          "equipamentos": 0.00,
          "estadia_paciente": 0.00,
          "obras_infraestrutura": 0.00,
          "servicos_saude": 0.00,
          "outros_relacionados": 0.00
        }

        **Regras Detalhadas:**
        1.  **Foco em Oncologia:** Considere APENAS valores explicitamente ligados a oncologia, c√¢ncer, quimioterapia, radioterapia, medicamentos oncol√≥gicos, equipamentos para diagn√≥stico/tratamento de c√¢ncer, etc. Ignore outros gastos de sa√∫de n√£o relacionados.
        2.  **Formato Num√©rico:** Todos os valores no JSON devem ser n√∫meros (float ou integer), usando ponto (.) como separador decimal. N√£o inclua "R$" ou separadores de milhar. Exemplo: 1500.50.
        3.  **Categoriza√ß√£o:**
            * **"medicamentos":** Some aqui valores de compra de quimioter√°picos, imunoter√°picos, f√°rmacos de suporte direto ao tratamento oncol√≥gico.
            * **"equipamentos":** Some valores de aquisi√ß√£o, aluguel ou manuten√ß√£o de equipamentos usados em oncologia (ex: acelerador linear, mam√≥grafo, tom√≥grafo para radioterapia, PET-CT).
            * **"estadia_paciente":** Some valores explicitamente mencionados como custo de interna√ß√£o, di√°ria de leito hospitalar, ou acomoda√ß√£o de pacientes oncol√≥gicos (menos comum em di√°rios, mas inclua se encontrar).
            * **"obras_infraestrutura":** Some valores de constru√ß√£o, reforma ou amplia√ß√£o de alas, centros ou hospitais oncol√≥gicos.
            * **"servicos_saude":** Some valores de contrata√ß√£o de servi√ßos m√©dicos oncol√≥gicos, exames de diagn√≥stico (patologia, imagem para oncologia), servi√ßos de radioterapia/quimioterapia, transporte de pacientes oncol√≥gicos (TFD).
            * **"outros_relacionados":** Use como um "catch-all" para gastos claramente oncol√≥gicos que n√£o se encaixam perfeitamente nas categorias acima (ex: campanhas de preven√ß√£o espec√≠ficas de c√¢ncer, software de gest√£o oncol√≥gica, etc.).
            * **"total_gasto_oncologico":** Deve ser a SOMA EXATA de todas as outras categorias ('medicamentos + equipamentos + estadia_paciente + obras_infraestrutura + servicos_saude + outros_relacionados'). Se m√∫ltiplos valores forem encontrados para uma mesma categoria no texto, some-os antes de colocar no JSON.
        4.  **Nenhum Valor Encontrado:** Se o texto n√£o contiver NENHUM valor monet√°rio relacionado √† oncologia, retorne o JSON com todos os campos zerados (0.00).
        5.  **Precis√£o e Valida√ß√£o:** Certifique-se de que o JSON retornado √© v√°lido. Se houver qualquer d√∫vida sobre a categoriza√ß√£o de um valor, use o campo "outros_relacionados".
        6.  **Exclus√£o de Texto Adicional:** N√£o inclua nenhuma explica√ß√£o, coment√°rio ou texto adicional fora do objeto JSON. Apenas o JSON puro.

        **Texto para An√°lise:**
        """
        ${textContent}
        """
    `;
}

async function enrichData() {
    console.log('‚úÖ Iniciando script de enriquecimento (usando .txt com fallback para excerpt)...');
    
    // Busca men√ß√µes n√£o processadas, AGORA INCLUINDO txt_url
    const mentionsToProcess = await db.query(
        'SELECT id, excerpt, txt_url FROM mentions WHERE gemini_analysis IS NULL' 
    );

    if (mentionsToProcess.rows.length === 0) {
        // ... (mensagem de conclus√£o) ...
        return;
    }

    console.log(`‚ÑπÔ∏è  Encontradas ${mentionsToProcess.rows.length} men√ß√µes para processar.`);

    for (const [index, mention] of mentionsToProcess.rows.entries()) {
        console.log(`\n[${index + 1}/${mentionsToProcess.rows.length}] Processando men√ß√£o ID: ${mention.id}...`);
        
        let textToAnalyze = null;
        let sourceUsed = 'excerpt'; // Para logar qual fonte foi usada

        try {
            // --- L√ìGICA DE SELE√á√ÉO DA FONTE ---
            if (mention.txt_url) {
                try {
                    console.log(`  -> Tentando baixar .txt de: ${mention.txt_url}`);
                    const response = await axios.get(mention.txt_url);
                    textToAnalyze = response.data; // Pega o conte√∫do de texto
                    sourceUsed = 'txt';
                    console.log(`  -> Sucesso ao baixar .txt (${(textToAnalyze.length / 1024).toFixed(2)} KB).`);
                } catch (txtDownloadError) {
                    console.warn(`  -> Aviso: Falha ao baixar .txt (${txtDownloadError.message}). Usando excerpt como fallback.`);
                    textToAnalyze = mention.excerpt; // Fallback para o excerpt
                }
            } else {
                console.log('  -> .txt URL n√£o dispon√≠vel. Usando excerpt.');
                textToAnalyze = mention.excerpt; // Usa o excerpt se n√£o houver txt_url
            }
            // --- FIM DA L√ìGICA DE SELE√á√ÉO ---

            // Garante que temos algum texto para analisar
            if (!textToAnalyze || textToAnalyze.trim() === '') {
                 console.warn('  -> Aviso: Fonte de texto vazia. Pulando an√°lise.');
                 // Marca como processado com erro ou dados vazios para n√£o tentar de novo
                 await db.query(
                    `UPDATE mentions SET gemini_analysis = $1, extracted_value = 0.00 WHERE id = $2`,
                    [JSON.stringify({ error: 'Texto fonte vazio', source: sourceUsed }), mention.id]
                 );
                 continue; // Pula para a pr√≥xima men√ß√£o
            }

            // ---- AN√ÅLISE COM GEMINI ----
            // ATEN√á√ÉO: Verificar tamanho do texto antes de enviar para o Gemini!
            // Uma vers√£o mais robusta adicionaria l√≥gica de chunking aqui se 'textToAnalyze' for muito grande.
            // Por simplicidade, vamos assumir que cabe (o que √© prov√°vel para a maioria dos .txt).

            const prompt = getGeminiPrompt(textToAnalyze);
            const result = await model.generateContent(prompt);
            const responseText = result.response.text();
            
            // ... (L√≥gica para parsear o JSON e salvar no banco, igual √† anterior) ...
            let analysisData;
            try {
                analysisData = JSON.parse(responseText);
            } catch (parseError) {
                // ... (Tratamento de erro de parse) ...
                analysisData = { error: 'JSON parse error', response: responseText, source: sourceUsed };
            }

            const totalValue = analysisData.total_gasto || 0.00;
            await db.query(
                `UPDATE mentions SET gemini_analysis = $1, extracted_value = $2 WHERE id = $3`,
                [JSON.stringify(analysisData), totalValue, mention.id]
            );

            console.log(`  -> Sucesso (fonte: ${sourceUsed})! Total extra√≠do: R$ ${totalValue}`);

            await delay(500); // Mant√©m a pausa

        } catch (error) {
            // ... (Tratamento de erro fatal, igual ao anterior) ...
            console.error(`‚ùå ERRO FATAL ao processar a men√ß√£o ID ${mention.id}:`, error.message);
            await delay(1000);
        }
    }

    console.log('üéâ Processo de enriquecimento de dados finalizado!');
}

enrichData().catch(console.error);